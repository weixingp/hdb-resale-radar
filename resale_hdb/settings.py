"""
Django settings for resale_hdb project.

Generated by 'django-admin startproject' using Django 3.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path

import joblib
from dotenv import load_dotenv
import os
# Build paths inside the project like this: BASE_DIR / 'subdir'.

BASE_DIR = Path(__file__).resolve().parent.parent

# Load or create environment variable file
ENV_FILEPATH = str(BASE_DIR) + "/proj.env"
try:
    f = open(ENV_FILEPATH)
    f.close()
    load_dotenv(ENV_FILEPATH)
except IOError:
    from django.core.management.utils import get_random_secret_key

    content = [
        'DJANGO_SECRET_KEY=' + get_random_secret_key() + '\n',
        'MYSQL_host=\n',
        'MYSQL_port=\n',
        'MYSQL_dbname=\n',
        'MYSQL_username=\n',
        'MYSQL_password=\n',
        'BROWSER_PATH=\n',
    ]

    with open(ENV_FILEPATH, 'w') as f:
        f.writelines(content)

    load_dotenv(ENV_FILEPATH)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!

SECRET_KEY = os.getenv("DJANGO_SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["127.0.0.1", "radar.kado.sg", "cz2006.kado.sg"]

LOGIN_URL = "/account/login/"
# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'rest_framework',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'main',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'resale_hdb.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
        'LOCATION': 'cache',
    }
}

DEFAULT_CACHE_TIME = 24 * 60 * 60  # 1 day

WSGI_APPLICATION = 'resale_hdb.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    # 'default': {
    #     'ENGINE': 'django.db.backends.sqlite3',
    #     'NAME': BASE_DIR / 'db.sqlite3',
    # },
    'default': {
        'NAME': os.getenv("MYSQL_dbname"),
        'HOST': os.getenv("MYSQL_host"),
        'PORT': os.getenv("MYSQL_port"),
        'ENGINE': 'mysql.connector.django',
        'USER': os.getenv("MYSQL_username"),
        'PASSWORD': os.getenv("MYSQL_password"),
        'OPTIONS': {
          # 'autocommit': True,
        },
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# allauth settings
SITE_ID = 1
AUTH_USER_MODEL = 'main.User'
ACCOUNT_USER_MODEL_USERNAME_FIELD = None
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'
# ACCOUNT_SIGNUP_REDIRECT = '/accounts/signup/details'
LOGIN_REDIRECT_URL = "/dashboard/"
# ACCOUNT_LOGOUT_REDIRECT_URL = "/account/login/"
ACCOUNT_LOGOUT_ON_GET = True  # Unsafe, but for this simple app, it's good enough.
ACCOUNT_EMAIL_VERIFICATION = None

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Singapore'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = str(BASE_DIR) + '/static/'

# load the ML model into mem
try:
    MLMODEL = [
        joblib.load(str(BASE_DIR) + "/Random_Forest.sav"),
        joblib.load(str(BASE_DIR) + "/Trained_Label_Encoder.joblib"),
        joblib.load(str(BASE_DIR) + "/Trained_Ordinal_Encoder.joblib"),
    ]
except Exception:
    MLMODEL = None

